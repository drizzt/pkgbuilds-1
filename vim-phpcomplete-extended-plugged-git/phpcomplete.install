_gitname=phpcomplete-extended

pre_install() {
  post_remove
}

post_install() {
  printf "%b\n" "$phpcomplete"
}

pre_upgrade() {
  post_remove
}

post_upgrade() {
  post_install
}

post_remove() {
  echo -n "Removing $_gitname directory... "
  rm -rf "$HOME/.vim/plugged/$_gitname"
  echo "done"
}

read -d '' phpcomplete <<'EOF'
# vim-phpcomplete-extended

To enable omnicomplete, add the following line to your vimrc:

    autocmd FileType php setlocal omnifunc=phpcomplete_extended#CompletePHP

Then, issuing <C-X><C-O> in insert mode will open the completion pop-up
menu.

For now this plugin supports Composer PHP projects. Upon detecting
a composer project the plugin scans classmap generated with:

    php composer.phar dumpautoload --optimize

By default, the composer command is set to php composer.phar.

The command can be changed by setting:

    g:phpcomplete_index_composer_command

The plugin is dependent on @var, @param, @return doc-comments to give
proper context aware autocomplete. So documenting your class will help
tremendously. It does not analyse full class. Just parses the variable
declaration to get the relevant tokens. Does not provide autocomplete
suggestion if there is error in code.

Indexing may take some time depending on project size. To decrease index
creation time I would recommend disabling xdebug extension in cli. To do
that go to the location where php.ini resides and copy the php.ini file
as php-cli.ini and comment out the xdebug line. To verify issue:

    php -m | grep xdebug

For configuration reference see helpdoc.
EOF
