post_install() {
  printf "$sentence\n"
}

post_upgrade() {
  post_install
}

read -d '' sentence <<'EOF'
vim-textobj-sentence
====================

Configuration
-------------

Because prose benefits more than code from a sentence text object, the
behavior of this plugin can be configured per file type. For example, to
enable sentence  in markdown and textile files, place in your
.vimrc:

    set nocompatible            " this may already be in your .vimrc
    filetype plugin indent on   " ...and this too

    augroup textobj_sentence
        autocmd!
        autocmd FileType markdown call textobj#sentence#init()
        autocmd FileType textile call textobj#sentence#init()
    augroup END

Decimal numbers and abbreviations
---------------------------------

Though the period . glyph/character will terminate a sentence, it use
doesn't always indicate so. The same glyph is used in abbreviations like
‘M.D.’ for Medical Doctor, for example.

But those abbreviations should be tolerated when detecting the boundaries
of a sentence. The following should be considered one text object,
rather than four:

    Magnum, P.I. lives at Robin’s Nest, located at 11435 18th Ave., Oahu, HI.

This plugin detects decimal numbers and common abbreviations. By default,
the following abbreviations will be recognized:

    let g:textobj#sentence#abbreviations = [
        \ '[ABCDIMPSUabcdegimpsv]',
        \ 'l[ab]', '[eRr]d', 'Ph', '[Ccp]l', '[Lli]n', '[cn]o',
        \ '[Oe]p', '[DJMSh]r', '[MVv]s', '[CFMPScfpw]t',
        \ 'alt', '[Ee]tc', 'div', 'es[pt]', '[Ll]td', 'min',
        \ '[MD]rs', '[Aa]pt', '[Aa]ve?', '[Ss]tr?',
        \ '[Aa]ssn', '[Bb]lvd', '[Dd]ept', 'incl', 'Inst', 'Prof', 'Univ',
        \ ]

Note that you can override/modify the above defaults in your
.vimrc, but be sure to include the declaration before your call to
textobj#sentence#init().

Motion commands
---------------

Motion commands on text objects are a powerful feature of Vim.

This plugin overrides Vim’s native commands for sentence selection:

    as      " select ‘around’ sentence with trailing whitespace
    is      " select ‘inside’ sentence without trailing whitespace

    (       " move to start of previous sentence
    )       " move to start of next sentence

This plugin adds:

    g)      " jump to end of current sentence
    g(      " jump to end of previous sentence

You can manipulate text just as with Vim’s original as and is commands,
such as cis for change, vas for visual selection, das for deletion,
yas for yanking to clipboard, etc.. Note that count isn’t supported
at present (due to limitations of the underlying vim-textobj-user)
but repeat with . does work.

If you prefer to retain the native commands, you can assign other key
mappings via your .vimrc:

    let g:textobj#sentence#select = 's'
    let g:textobj#sentence#move_p = '('
    let g:textobj#sentence#move_n = ')'

See also
--------

If you find this plugin useful, check out these others by @reedes:

* vim-colors-pencil - color scheme for Vim inspired by IA Writer
* vim-lexical - building on Vim’s spell-check and thesaurus/dictionary completion
* vim-litecorrect - lightweight auto-correction for Vim
* vim-one - make use of Vim’s +clientserver capabilities
* vim-pencil - rethinking Vim as a tool for writers
* vim-textobj-quote - extends Vim to support typographic (‘curly’) quotes
* vim-thematic - modify Vim’s appearance to suit your task and environment
* vim-wheel - screen-anchored cursor movement for Vim
* vim-wordy - uncovering usage problems in writing

Future development
------------------

If you’ve spotted a problem or have an idea on improving this plugin,
please post it to the github project issue page. Pull requests that add
new regression tests (even failing ones that demonstrate a bug!) are
welcome too.
EOF
